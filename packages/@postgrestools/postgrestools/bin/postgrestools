#!/usr/bin/env node
const { platform, arch, env } = process;

const PLATFORMS = {
  win32: {
    x64: "@postgrestools/cli-x86_64-windows-msvc/postgrestools.exe",
    arm64: "@postgrestools/cli-aarch64-windows-msvc/postgrestools.exe",
  },
  darwin: {
    x64: "@postgrestools/cli-x86_64-apple-darwin/postgrestools",
    arm64: "@postgrestools/cli-aarch64-apple-darwin/postgrestools",
  },
  linux: {
    x64: "@postgrestools/cli-x86_64-linux-gnu/postgrestools",
    arm64: "@postgrestools/cli-aarch64-linux-gnu/postgrestools",
  },
  "linux-musl": {
    x64: "@postgrestools/cli-x86_64-linux-musl/postgrestools",
    arm64: "@postgrestools/cli-aarch64-linux-musl/postgrestools",
  },
};

function isMusl() {
  let stderr;
  try {
    stderr = execSync("ldd --version", {
      stdio: ["pipe", "pipe", "pipe"],
    });
  } catch (err) {
    stderr = err.stderr;
  }
  if (stderr.indexOf("musl") > -1) {
    return true;
  }
  return false;
}

function getPlatform() {
  if (platform === "linux") {
    return isMusl() ? "linux-musl" : "linux";
  }

  return platform;
}

const binPath = env.POSTGRESTOOLS_BINARY || PLATFORMS?.[getPlatform()]?.[arch];

if (binPath) {
  const result = require("child_process").spawnSync(
    require.resolve(binPath),
    process.argv.slice(2),
    {
      shell: false,
      stdio: "inherit",
      env,
    }
  );

  if (result.error) {
    throw result.error;
  }

  process.exitCode = result.status;
} else {
  console.error(
    "The PostgresTools CLI package doesn't ship with prebuilt binaries for your platform yet. Please file an issue in the main repository."
  );
  process.exitCode = 1;
}
