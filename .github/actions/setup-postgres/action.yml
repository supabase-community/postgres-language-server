name: Setup Postgres
description: Setup Postgres across operating systems
inputs:
  postgres-version:
    description: Postgres Version
    default: 15
  install-plpgsql-check:
    description: Install plpgsql_check extension (only supported on macOS/Linux)
    default: 'true'
runs:
  using: composite
  steps:
    # For Windows and macOS, use the action
    - name: Setup postgres (Windows/macOS)
      if: runner.os == 'Windows' || runner.os == 'macOS'
      id: postgres
      uses: ikalnytskyi/action-setup-postgres@v7
      with:
        postgres-version: ${{ inputs.postgres-version }}
        username: postgres
        password: postgres
        database: postgres
        port: 5432

    # Install build tools on Windows if extension is requested
    - name: Install build tools (Windows)
      if: runner.os == 'Windows' && inputs.install-plpgsql-check == 'true'
      shell: bash
      run: |
        echo "Installing MSYS2 for compilation..."
        choco install msys2 -y --timeout=600

        # Initialize MSYS2 and install build tools
        C:/tools/msys64/usr/bin/bash.exe -lc "pacman -S --noconfirm base-devel mingw-w64-x86_64-toolchain git"

    # Install and compile plpgsql_check (Windows with build tools)
    - name: Install and compile plpgsql_check (Windows)
      if: runner.os == 'Windows' && inputs.install-plpgsql-check == 'true'
      shell: bash
      run: |
        export PATH="/c/tools/msys64/usr/bin:$PATH"

        echo "PostgreSQL version: $(pg_config --version)"
        echo "Extension directory: $(pg_config --sharedir)/extension"

        git clone https://github.com/okbob/plpgsql_check.git
        cd plpgsql_check

        # Use MSYS2 make with full paths
        C:/tools/msys64/usr/bin/make.exe USE_PGXS=1 clean
        C:/tools/msys64/usr/bin/make.exe USE_PGXS=1 all
        C:/tools/msys64/usr/bin/make.exe USE_PGXS=1 install

    # Install and compile plpgsql_check (macOS)
    - name: Install and compile plpgsql_check (macOS)
      if: runner.os == 'macOS' && inputs.install-plpgsql-check == 'true'
      shell: bash
      run: |
        export PATH="$(pg_config --bindir):$PATH"

        echo "PostgreSQL version: $(pg_config --version)"
        echo "Extension directory: $(pg_config --sharedir)/extension"

        git clone https://github.com/okbob/plpgsql_check.git
        cd plpgsql_check

        make USE_PGXS=1 clean
        make USE_PGXS=1 all
        sudo make USE_PGXS=1 install

    # Create extension in database (Windows/macOS)
    - name: Create extension in database
      if: (runner.os == 'Windows' || runner.os == 'macOS') && inputs.install-plpgsql-check == 'true'
      shell: bash
      env:
        PGSERVICE: ${{ steps.postgres.outputs.service-name }}
      run: |
        psql -c "CREATE EXTENSION plpgsql_check;" || echo "Extension creation failed - this is expected if compilation failed"
        psql -c "SELECT extname, extversion FROM pg_extension WHERE extname = 'plpgsql_check';" || echo "Extension not available"

    # For Linux, use custom Docker image
    - name: Build and start PostgreSQL with plpgsql_check
      if: runner.os == 'Linux'
      shell: bash
      run: |
        docker build -t postgres-plpgsql-check:latest .
        docker run -d --name postgres \
          -e POSTGRES_USER=postgres \
          -e POSTGRES_PASSWORD=postgres \
          -e POSTGRES_DB=postgres \
          -p 5432:5432 \
          postgres-plpgsql-check:latest

        for _ in {1..30}; do
          if docker exec postgres pg_isready -U postgres; then
            break
          fi
          sleep 1
        done
