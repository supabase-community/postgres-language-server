---
source: crates/pgls_pretty_print/tests/tests.rs
assertion_line: 160
input_file: crates/pgls_pretty_print/tests/data/multi/select_60.sql
---
SELECT
  *
FROM
  onek
WHERE
  onek.unique1 <
  10
ORDER BY onek.unique1;

SELECT
  onek.unique1,
  onek.stringu1
FROM
  onek
WHERE
  onek.unique1 <
  20
ORDER BY unique1 USING >;

SELECT
  onek.unique1,
  onek.stringu1
FROM
  onek
WHERE
  onek.unique1 >
  980
ORDER BY stringu1 USING <;

SELECT
  onek.unique1,
  onek.string4
FROM
  onek
WHERE
  onek.unique1 >
  980
ORDER BY string4 USING <,
  unique1 USING >;

SELECT
  onek.unique1,
  onek.string4
FROM
  onek
WHERE
  onek.unique1 >
  980
ORDER BY string4 USING >,
  unique1 USING <;

SELECT
  onek.unique1,
  onek.string4
FROM
  onek
WHERE
  onek.unique1 <
  20
ORDER BY unique1 USING >,
  string4 USING <;

SELECT
  onek.unique1,
  onek.string4
FROM
  onek
WHERE
  onek.unique1 <
  20
ORDER BY unique1 USING <,
  string4 USING >;

ANALYZE onek2;

SET enable_seqscan = off;

SET enable_bitmapscan = off;

SET enable_sort = off;

SELECT onek2.* FROM onek2 WHERE onek2.unique1 < 10;

SELECT
  onek2.unique1,
  onek2.stringu1
FROM
  onek2
WHERE
  onek2.unique1 <
  20
ORDER BY unique1 USING >;

SELECT
  onek2.unique1,
  onek2.stringu1
FROM
  onek2
WHERE
  onek2.unique1 >
  980;

RESET enable_seqscan;

RESET enable_bitmapscan;

RESET enable_sort;

SELECT p.name, p.age FROM person AS p;

SELECT
  p.name,
  p.age
FROM
  person AS p
ORDER BY age USING >,
  name;

SELECT foo FROM (SELECT 1 OFFSET 0) AS foo;

SELECT foo FROM (SELECT NULL OFFSET 0) AS foo;

SELECT foo FROM (SELECT 'xyzzy', 1, NULL OFFSET 0) AS foo;

SELECT
  *
FROM
  onek,
  (VALUES (147,
  'RFAAAA'),
  (931,
  'VJAAAA')) AS v (i,
  j)
WHERE
  onek.unique1 =
  v.i AND
  onek.stringu1 =
  v.j;

SELECT
  *
FROM
  onek,
  (VALUES ((SELECT
    i
  FROM
    (VALUES (10000),
    (2),
    (389),
    (1000),
    (2000),
    ((SELECT
      10029))) AS foo (i)
  ORDER BY i ASC
  LIMIT 1))) AS bar (i)
WHERE
  onek.unique1 =
  bar.i;

SELECT
  *
FROM
  onek
WHERE
  (unique1,
  ten) IN (VALUES (1,
  1),
  (20,
  0),
  (99,
  9),
  (17,
  99))
ORDER BY unique1;

VALUES (1, 2), (3, 4 + 4), (7, 77.7);

VALUES (1,
2),
(3,
4 + 4),
(7,
77.7)
UNION ALL
SELECT
  2 + 2,
  57
UNION ALL
SELECT
  *
FROM
  int8_tbl;

CREATE TEMPORARY TABLE nocols ();

INSERT INTO nocols DEFAULT VALUES;

SELECT * FROM nocols AS n, LATERAL (VALUES (n.*)) AS v;

CREATE TEMPORARY TABLE foo ( f1 INT );

INSERT INTO foo
VALUES (42),
(3),
(10),
(7),
(NULL),
(NULL),
(1);

SELECT * FROM foo ORDER BY f1;

SELECT * FROM foo ORDER BY f1 ASC;

SELECT * FROM foo ORDER BY f1 NULLS FIRST;

SELECT * FROM foo ORDER BY f1 DESC;

SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;

CREATE INDEX "fooi" ON foo USING btree (f1);

SET enable_sort = false;

SELECT * FROM foo ORDER BY f1;

SELECT * FROM foo ORDER BY f1 NULLS FIRST;

SELECT * FROM foo ORDER BY f1 DESC;

SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;

DROP INDEX "fooi";

CREATE INDEX "fooi" ON foo USING btree (f1 DESC);

SELECT * FROM foo ORDER BY f1;

SELECT * FROM foo ORDER BY f1 NULLS FIRST;

SELECT * FROM foo ORDER BY f1 DESC;

SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;

DROP INDEX "fooi";

CREATE INDEX "fooi" ON foo USING btree (f1 DESC NULLS LAST);

SELECT * FROM foo ORDER BY f1;

SELECT * FROM foo ORDER BY f1 NULLS FIRST;

SELECT * FROM foo ORDER BY f1 DESC;

SELECT * FROM foo ORDER BY f1 DESC NULLS LAST;

SELECT
  *
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 =
  'ATAAAA';

SELECT
  *
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 =
  'ATAAAA';

SELECT
  *
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 =
  'ATAAAA';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 =
  'ATAAAA';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 =
  'ATAAAA';

SELECT * FROM onek2 WHERE unique2 = 11 AND stringu1 < 'B';

SELECT * FROM onek2 WHERE unique2 = 11 AND stringu1 < 'B';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B'
FOR UPDATE;

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B'
FOR UPDATE;

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'C';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'C';

SET enable_indexscan = off;

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B';

SELECT
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B';

RESET enable_indexscan;

SELECT
  unique1,
  unique2
FROM
  onek2
WHERE
  (unique2 =
  11 OR
  unique1 =
  0) AND
  stringu1 <
  'B';

SELECT
  unique1,
  unique2
FROM
  onek2
WHERE
  (unique2 =
  11 OR
  unique1 =
  0) AND
  stringu1 <
  'B';

SELECT
  unique1,
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B' OR
  unique1 =
  0;

SELECT
  unique1,
  unique2
FROM
  onek2
WHERE
  unique2 =
  11 AND
  stringu1 <
  'B' OR
  unique1 =
  0;

SELECT 1 AS x ORDER BY x;

CREATE FUNCTION sillysrf(
  INT
)
RETURNS SETOF INT
AS 'values (1),(10),(2),($1)'
LANGUAGE "sql"
IMMUTABLE;

SELECT sillysrf(42);

SELECT sillysrf(-1) ORDER BY 1;

DROP FUNCTION sillysrf(INT);

SELECT
  *
FROM
  (VALUES (2),
  (NULL),
  (1)) AS v (k)
WHERE
  k =
  k
ORDER BY k;

SELECT
  *
FROM
  (VALUES (2),
  (NULL),
  (1)) AS v (k)
WHERE
  k =
  k;

CREATE TABLE list_parted_tbl (
  a INT,
  b INT
)
PARTITION
BY LIST
(a);

CREATE TABLE list_parted_tbl1
PARTITION OF list_parted_tbl
FOR VALUES IN (1)
PARTITION
BY LIST
(b);

SELECT * FROM list_parted_tbl;

DROP TABLE "list_parted_tbl";
