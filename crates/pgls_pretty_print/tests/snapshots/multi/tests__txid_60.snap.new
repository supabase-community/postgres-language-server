---
source: crates/pgls_pretty_print/tests/tests.rs
assertion_line: 160
input_file: crates/pgls_pretty_print/tests/data/multi/txid_60.sql
---
SELECT CAST('12:13:' AS TXID_SNAPSHOT);

SELECT CAST('12:18:14,16' AS TXID_SNAPSHOT);

SELECT CAST('12:16:14,14' AS TXID_SNAPSHOT);

SELECT CAST('31:12:' AS TXID_SNAPSHOT);

SELECT CAST('0:1:' AS TXID_SNAPSHOT);

SELECT CAST('12:13:0' AS TXID_SNAPSHOT);

SELECT CAST('12:16:14,13' AS TXID_SNAPSHOT);

CREATE TEMPORARY TABLE snapshot_test (
  nr INT,
  snap TXID_SNAPSHOT
);

INSERT INTO snapshot_test VALUES (1, '12:13:');

INSERT INTO snapshot_test VALUES (2, '12:20:13,15,18');

INSERT INTO snapshot_test
VALUES (3,
'100001:100009:100005,100007,100008');

INSERT INTO snapshot_test
VALUES (4,
'100:150:101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131');

SELECT snap FROM snapshot_test ORDER BY nr;

SELECT
  txid_snapshot_xmin(snap),
  txid_snapshot_xmax(snap),
  txid_snapshot_xip(snap)
FROM
  snapshot_test
ORDER BY nr;

SELECT
  id,
  txid_visible_in_snapshot(id,
  snap)
FROM
  snapshot_test,
  generate_series(11,
  21) AS id
WHERE
  nr =
  2;

SELECT
  id,
  txid_visible_in_snapshot(id,
  snap)
FROM
  snapshot_test,
  generate_series(90,
  160) AS id
WHERE
  nr =
  4;

SELECT
  txid_current() >=
  txid_snapshot_xmin(txid_current_snapshot());

SELECT
  txid_visible_in_snapshot(txid_current(),
  txid_current_snapshot());

SELECT
  CAST('1000100010001000:1000100010001100:1000100010001012,1000100010001013' AS TXID_SNAPSHOT);

SELECT
  txid_visible_in_snapshot('1000100010001012',
  '1000100010001000:1000100010001100:1000100010001012,1000100010001013');

SELECT
  txid_visible_in_snapshot('1000100010001015',
  '1000100010001000:1000100010001100:1000100010001012,1000100010001013');

SELECT CAST('1:9223372036854775807:3' AS TXID_SNAPSHOT);

SELECT CAST('1:9223372036854775808:3' AS TXID_SNAPSHOT);

BEGIN;

SELECT txid_current_if_assigned() IS NULL;

SELECT txid_current();

SELECT
  txid_current_if_assigned() IS NOT DISTINCT FROM CAST('txid_current' AS BIGINT);

COMMIT;

BEGIN;

SELECT txid_current() AS committed;

COMMIT;

BEGIN;

SELECT txid_current() AS rolledback;

ROLLBACK;

BEGIN;

SELECT txid_current() AS inprogress;

SELECT txid_status('committed') AS committed;

SELECT txid_status('rolledback') AS rolledback;

SELECT txid_status('inprogress') AS inprogress;

SELECT txid_status(1);

SELECT txid_status(2);

SELECT txid_status(3);

COMMIT;

BEGIN;

CREATE FUNCTION test_future_xid_status(
  BIGINT
)
RETURNS VOID
LANGUAGE "plpgsql"
AS '
BEGIN
  PERFORM txid_status($1);
  RAISE EXCEPTION ''didn''''t ERROR at xid in the future as expected'';
EXCEPTION
  WHEN invalid_parameter_value THEN
    RAISE NOTICE ''Got expected error for xid in the future'';
END;
';

SELECT test_future_xid_status('inprogress' + 10000);

ROLLBACK;
