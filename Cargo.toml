[workspace]
members  = ["crates/*", "xtask/codegen", "xtask/rules_check", "docs/codegen"]
resolver = "2"

[workspace.package]
authors      = ["Supabase Communnity"]
categories   = ["development-tools", "postgres", "supabase"]
edition      = "2024"
homepage     = "https://supabase.com/"
keywords     = ["linter", "typechecker", "postgres", "language-server"]
license      = "MIT"
repository   = "https://github.com/supabase-community/postgres-language-server"
rust-version = "1.86.0"

[workspace.dependencies]
# supporting crates unrelated to postgres
anyhow                   = "1.0.92"
biome_deserialize        = "0.6.0"
biome_deserialize_macros = "0.6.0"
biome_js_factory         = "0.5.7"
biome_js_formatter       = "0.5.7"
biome_js_syntax          = "0.5.7"
biome_rowan              = "0.5.7"
biome_string_case        = "0.5.8"
bpaf                     = { version = "0.9.15", features = ["derive"] }
criterion                = "0.5"
crossbeam                = "0.8.4"
enumflags2               = "0.7.11"
ignore                   = "0.4.23"
indexmap                 = { version = "2.6.0", features = ["serde"] }
insta                    = "1.31.0"
oxc_resolver             = "1.12.0"
pg_query                 = "6.1.0"
proc-macro2              = "1.0.66"
quote                    = "1.0.33"
rayon                    = "1.10.0"
regex                    = "1.11.1"
rustc-hash               = "2.0.0"
schemars                 = { version = "0.8.22", features = ["indexmap2", "smallvec"] }
serde                    = "1.0.195"
serde_json               = "1.0.114"
similar                  = "2.6.0"
slotmap                  = "1.0.7"
smallvec                 = { version = "1.13.2", features = ["union", "const_new", "serde"] }
strum                    = { version = "0.27.1", features = ["derive"] }
# this will use tokio if available, otherwise async-std
convert_case             = "0.6.0"
prost                    = "0.13.5"
prost-reflect            = "0.15.3"
protox                   = "0.8.0"
sqlx                     = { version = "0.8.2", features = ["runtime-tokio", "runtime-async-std", "postgres", "json"] }
syn                      = { version = "1.0.109", features = ["full"] }
termcolor                = "1.4.1"
test-log                 = "0.2.17"
thiserror                = "1.0.31"
tokio                    = { version = "1.40.0", features = ["full"] }
tracing                  = { version = "0.1.40", default-features = false, features = ["std"] }
tracing-bunyan-formatter = { version = "0.3.10 " }
tracing-subscriber       = "0.3.18"
tree-sitter              = "0.25.9"
unicode-width            = "0.1.12"

# postgres specific crates
pgls_analyse                = { path = "./crates/pgls_analyse", version = "0.0.0" }
pgls_analyser               = { path = "./crates/pgls_analyser", version = "0.0.0" }
pgls_cli                    = { path = "./crates/pgls_cli", version = "0.0.0" }
pgls_completions            = { path = "./crates/pgls_completions", version = "0.0.0" }
pgls_configuration          = { path = "./crates/pgls_configuration", version = "0.0.0" }
pgls_console                = { path = "./crates/pgls_console", version = "0.0.0" }
pgls_diagnostics            = { path = "./crates/pgls_diagnostics", version = "0.0.0" }
pgls_diagnostics_categories = { path = "./crates/pgls_diagnostics_categories", version = "0.0.0" }
pgls_diagnostics_macros     = { path = "./crates/pgls_diagnostics_macros", version = "0.0.0" }
pgls_env                    = { path = "./crates/pgls_env", version = "0.0.0" }
pgls_fs                     = { path = "./crates/pgls_fs", version = "0.0.0" }
pgls_hover                  = { path = "./crates/pgls_hover", version = "0.0.0" }
pgls_lexer                  = { path = "./crates/pgls_lexer", version = "0.0.0" }
pgls_lexer_codegen          = { path = "./crates/pgls_lexer_codegen", version = "0.0.0" }
pgls_lsp                    = { path = "./crates/pgls_lsp", version = "0.0.0" }
pgls_markup                 = { path = "./crates/pgls_markup", version = "0.0.0" }
pgls_plpgsql_check          = { path = "./crates/pgls_plpgsql_check", version = "0.0.0" }
pgls_query                  = { path = "./crates/pgls_query", version = "0.0.0" }
pgls_query_ext              = { path = "./crates/pgls_query_ext", version = "0.0.0" }
pgls_query_macros           = { path = "./crates/pgls_query_macros", version = "0.0.0" }
pgls_schema_cache           = { path = "./crates/pgls_schema_cache", version = "0.0.0" }
pgls_statement_splitter     = { path = "./crates/pgls_statement_splitter", version = "0.0.0" }
pgls_suppressions           = { path = "./crates/pgls_suppressions", version = "0.0.0" }
pgls_text_edit              = { path = "./crates/pgls_text_edit", version = "0.0.0" }
pgls_text_size              = { path = "./crates/pgls_text_size", version = "0.0.0" }
pgls_tokenizer              = { path = "./crates/pgls_tokenizer", version = "0.0.0" }
pgls_treesitter             = { path = "./crates/pgls_treesitter", version = "0.0.0" }
pgls_treesitter_grammar     = { path = "./crates/pgls_treesitter_grammar", version = "0.0.0" }
pgls_typecheck              = { path = "./crates/pgls_typecheck", version = "0.0.0" }
pgls_workspace              = { path = "./crates/pgls_workspace", version = "0.0.0" }
pgls_workspace_macros       = { path = "./crates/pgls_workspace_macros", version = "0.0.0" }

pgls_test_macros = { path = "./crates/pgls_test_macros" }
pgls_test_utils  = { path = "./crates/pgls_test_utils", version = "0.0.0" }


[profile.dev.package]
insta.opt-level = 3
