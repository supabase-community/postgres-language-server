[workspace]
members  = ["crates/*", "lib/*", "xtask/codegen", "xtask/rules_check", "docs/codegen"]
resolver = "2"

[workspace.package]
authors      = ["Supabase Communnity"]
categories   = ["development-tools", "postgres", "supabase"]
edition      = "2024"
homepage     = "https://supabase.com/"
keywords     = ["linter", "typechecker", "postgres", "language-server"]
license      = "MIT"
repository   = "https://github.com/supabase-community/postgres-language-server"
rust-version = "1.85.0"

[workspace.dependencies]
# supporting crates unrelated to postgres
anyhow                   = "1.0.92"
biome_deserialize        = "0.6.0"
biome_deserialize_macros = "0.6.0"
biome_js_factory         = "0.5.7"
biome_js_formatter       = "0.5.7"
biome_js_syntax          = "0.5.7"
biome_rowan              = "0.5.7"
biome_string_case        = "0.5.8"
bpaf                     = { version = "0.9.15", features = ["derive"] }
crossbeam                = "0.8.4"
enumflags2               = "0.7.11"
ignore                   = "0.4.23"
indexmap                 = { version = "2.6.0", features = ["serde"] }
insta                    = "1.31.0"
pg_query                 = "6.1.0"
proc-macro2              = "1.0.66"
quote                    = "1.0.33"
rayon                    = "1.10.0"
regex                    = "1.11.1"
rustc-hash               = "2.0.0"
schemars                 = { version = "0.8.22", features = ["indexmap2", "smallvec"] }
serde                    = "1.0.195"
serde_json               = "1.0.114"
similar                  = "2.6.0"
smallvec                 = { version = "1.13.2", features = ["union", "const_new", "serde"] }
strum                    = { version = "0.27.1", features = ["derive"] }
# this will use tokio if available, otherwise async-std
sqlx               = { version = "0.8.2", features = ["runtime-tokio", "runtime-async-std", "postgres", "json"] }
syn                = "1.0.109"
termcolor          = "1.4.1"
test-log           = "0.2.17"
tokio              = { version = "1.40.0", features = ["full"] }
tower-lsp          = "0.20.0"
tracing            = { version = "0.1.40", default-features = false, features = ["std"] }
tracing-subscriber = "0.3.18"
tree-sitter        = "0.20.10"
tree_sitter_sql    = { path = "./lib/tree_sitter_sql", version = "0.0.0" }
unicode-width      = "0.1.12"

# postgres specific crates
pgt_analyse                = { path = "./crates/pgt_analyse", version = "0.0.0" }
pgt_analyser               = { path = "./crates/pgt_analyser", version = "0.0.0" }
pgt_base_db                = { path = "./crates/pgt_base_db", version = "0.0.0" }
pgt_cli                    = { path = "./crates/pgt_cli", version = "0.0.0" }
pgt_completions            = { path = "./crates/pgt_completions", version = "0.0.0" }
pgt_configuration          = { path = "./crates/pgt_configuration", version = "0.0.0" }
pgt_console                = { path = "./crates/pgt_console", version = "0.0.0" }
pgt_diagnostics            = { path = "./crates/pgt_diagnostics", version = "0.0.0" }
pgt_diagnostics_categories = { path = "./crates/pgt_diagnostics_categories", version = "0.0.0" }
pgt_diagnostics_macros     = { path = "./crates/pgt_diagnostics_macros", version = "0.0.0" }
pgt_flags                  = { path = "./crates/pgt_flags", version = "0.0.0" }
pgt_fs                     = { path = "./crates/pgt_fs", version = "0.0.0" }
pgt_lexer                  = { path = "./crates/pgt_lexer", version = "0.0.0" }
pgt_lexer_codegen          = { path = "./crates/pgt_lexer_codegen", version = "0.0.0" }
pgt_lint                   = { path = "./crates/pgt_lint", version = "0.0.0" }
pgt_lsp                    = { path = "./crates/pgt_lsp", version = "0.0.0" }
pgt_lsp_converters         = { path = "./crates/pgt_lsp_converters", version = "0.0.0" }
pgt_markup                 = { path = "./crates/pgt_markup", version = "0.0.0" }
pgt_query_ext              = { path = "./crates/pgt_query_ext", version = "0.0.0" }
pgt_query_ext_codegen      = { path = "./crates/pgt_query_ext_codegen", version = "0.0.0" }
pgt_query_proto_parser     = { path = "./crates/pgt_query_proto_parser", version = "0.0.0" }
pgt_schema_cache           = { path = "./crates/pgt_schema_cache", version = "0.0.0" }
pgt_statement_splitter     = { path = "./crates/pgt_statement_splitter", version = "0.0.0" }
pgt_text_edit              = { path = "./crates/pgt_text_edit", version = "0.0.0" }
pgt_text_size              = { path = "./crates/pgt_text_size", version = "0.0.0" }
pgt_treesitter_queries     = { path = "./crates/pgt_treesitter_queries", version = "0.0.0" }
pgt_type_resolver          = { path = "./crates/pgt_type_resolver", version = "0.0.0" }
pgt_typecheck              = { path = "./crates/pgt_typecheck", version = "0.0.0" }
pgt_workspace              = { path = "./crates/pgt_workspace", version = "0.0.0" }

pgt_test_macros = { path = "./crates/pgt_test_macros" }
pgt_test_utils  = { path = "./crates/pgt_test_utils" }

docs_codegen = { path = "./docs/codegen", version = "0.0.0" }

[profile.dev.package]
insta.opt-level = 3
